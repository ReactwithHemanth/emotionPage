{"ast":null,"code":"export const analyzeEmotionWithGemini = async (happiness, energy, anger, anxiety, motivation) => {\n  const apiKey = \"AIzaSyDyuSW159pD4ApqkKNVr_V1lbYwVSXhYT0\"; // Replace with your actual API key\n  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n  const prompt = `Provide a productivity tip and 3 actionable steps based on these emotional scores:\n    - Happiness: ${happiness}\n    - Energy: ${energy}\n    - Anger: ${anger}\n    - Anxiety: ${anxiety}\n    - Motivation: ${motivation}\n\n    Format the response in HTML as follows:\n    <ul>\n      <li><strong>Tip:</strong> [Your tip here]</li>\n      <li><strong>Steps:</strong>\n        <ol>\n          <li>[Step 1]</li>\n          <li>[Step 2]</li>\n          <li>[Step 3]</li>\n        </ol>\n      </li>\n    </ul>`;\n  const body = {\n    prompt: {\n      text: prompt\n    },\n    temperature: 0.7,\n    // Adjust temperature for response variability\n    maxOutputTokens: 500 // Set the max tokens as needed\n  };\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch data from Gemini API\");\n  }\n  const data = await response.json();\n  return data.candidates[0].content.parts[0].text; // Extract the generated text\n};","map":{"version":3,"names":["analyzeEmotionWithGemini","happiness","energy","anger","anxiety","motivation","apiKey","url","prompt","body","text","temperature","maxOutputTokens","response","fetch","method","headers","JSON","stringify","ok","Error","data","json","candidates","content","parts"],"sources":["/Users/hemanth/Desktop/Learn/emotion.ai/emotion-productivity-app/src/components/analyse.js"],"sourcesContent":["export const analyzeEmotionWithGemini = async (happiness, energy, anger, anxiety, motivation) => {\n  const apiKey = \"AIzaSyDyuSW159pD4ApqkKNVr_V1lbYwVSXhYT0\"; // Replace with your actual API key\n  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n\n  const prompt = `Provide a productivity tip and 3 actionable steps based on these emotional scores:\n    - Happiness: ${happiness}\n    - Energy: ${energy}\n    - Anger: ${anger}\n    - Anxiety: ${anxiety}\n    - Motivation: ${motivation}\n\n    Format the response in HTML as follows:\n    <ul>\n      <li><strong>Tip:</strong> [Your tip here]</li>\n      <li><strong>Steps:</strong>\n        <ol>\n          <li>[Step 1]</li>\n          <li>[Step 2]</li>\n          <li>[Step 3]</li>\n        </ol>\n      </li>\n    </ul>`;\n\n  const body = {\n    prompt: {\n      text: prompt,\n    },\n    temperature: 0.7, // Adjust temperature for response variability\n    maxOutputTokens: 500, // Set the max tokens as needed\n  };\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch data from Gemini API\");\n  }\n\n  const data = await response.json();\n  return data.candidates[0].content.parts[0].text; // Extract the generated text\n};\n"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAG,MAAAA,CAAOC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAEC,UAAU,KAAK;EAC/F,MAAMC,MAAM,GAAG,yCAAyC,CAAC,CAAC;EAC1D,MAAMC,GAAG,GAAG,gGAAgGD,MAAM,EAAE;EAEpH,MAAME,MAAM,GAAG;AACjB,mBAAmBP,SAAS;AAC5B,gBAAgBC,MAAM;AACtB,eAAeC,KAAK;AACpB,iBAAiBC,OAAO;AACxB,oBAAoBC,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;EAER,MAAMI,IAAI,GAAG;IACXD,MAAM,EAAE;MACNE,IAAI,EAAEF;IACR,CAAC;IACDG,WAAW,EAAE,GAAG;IAAE;IAClBC,eAAe,EAAE,GAAG,CAAE;EACxB,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;IAChCQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDP,IAAI,EAAEQ,IAAI,CAACC,SAAS,CAACT,IAAI;EAC3B,CAAC,CAAC;EAEF,IAAI,CAACI,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACzD;EAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC;AACnD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}