{"ast":null,"code":"import { ChatGoogleGenerativeAI } from \"langchain/chat_models/google_generativeai\"; // LangChain integration\nimport { HumanMessage } from \"langchain/schema\"; // LangChain message schema\nexport const geminiModel = new ChatGoogleGenerativeAI({\n  apiKey: apiKey,\n  // Replace with your actual API key\n  modelName: \"gemini-pro\" // Use the appropriate model\n});\nexport const analyzeEmotionWithGemini = async (happiness, energy, anger, anxiety, motivation) => {\n  const apiKey = \"AIzaSyD4LvXDh6ogmvRykMctSXRwrMGGrXxmKkE\"; // Replace with your actual API key\n  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n  // Initialize LangChain model\n\n  const prompt = `Provide a practical and emotional tip and 3 actionable steps based on these emotional scores like a personal doctor:\n    - Happiness: ${happiness}\n    - Energy: ${energy}\n    - Anger: ${anger}\n    - Anxiety: ${anxiety}\n    - Motivation: ${motivation}\n\n    Format the response in HTML as follows:\n    <ul>\n      <li><strong>Tip:</strong> [Your tip here]</li>\n      <li><strong>Steps:</strong>\n        <ol>\n          <li>[Step 1]</li>\n          <li>[Step 2]</li>\n          <li>[Step 3]</li>\n        </ol>\n      </li>\n    </ul>`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      contents: [{\n        parts: [{\n          text: prompt\n        }]\n      }],\n      generationConfig: {\n        maxOutputTokens: 250 // Limit response length\n      }\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch data from Gemini API\");\n  }\n  const data = await response.json();\n  return data.candidates[0].content.parts[0].text;\n};","map":{"version":3,"names":["ChatGoogleGenerativeAI","HumanMessage","geminiModel","apiKey","modelName","analyzeEmotionWithGemini","happiness","energy","anger","anxiety","motivation","url","prompt","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","generationConfig","maxOutputTokens","ok","Error","data","json","candidates","content"],"sources":["/Users/hemanth/Desktop/Learn/emotion.ai/emotion-productivity-app/src/components/analyse.js"],"sourcesContent":["import { ChatGoogleGenerativeAI } from \"langchain/chat_models/google_generativeai\"; // LangChain integration\nimport { HumanMessage } from \"langchain/schema\"; // LangChain message schema\nexport const geminiModel = new ChatGoogleGenerativeAI({\n  apiKey: apiKey, // Replace with your actual API key\n  modelName: \"gemini-pro\", // Use the appropriate model\n});\nexport const analyzeEmotionWithGemini = async (happiness, energy, anger, anxiety, motivation) => {\n  const apiKey = \"AIzaSyD4LvXDh6ogmvRykMctSXRwrMGGrXxmKkE\"; // Replace with your actual API key\n  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n  // Initialize LangChain model\n\n  const prompt = `Provide a practical and emotional tip and 3 actionable steps based on these emotional scores like a personal doctor:\n    - Happiness: ${happiness}\n    - Energy: ${energy}\n    - Anger: ${anger}\n    - Anxiety: ${anxiety}\n    - Motivation: ${motivation}\n\n    Format the response in HTML as follows:\n    <ul>\n      <li><strong>Tip:</strong> [Your tip here]</li>\n      <li><strong>Steps:</strong>\n        <ol>\n          <li>[Step 1]</li>\n          <li>[Step 2]</li>\n          <li>[Step 3]</li>\n        </ol>\n      </li>\n    </ul>`;\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      contents: [\n        {\n          parts: [\n            {\n              text: prompt,\n            },\n          ],\n        },\n      ],\n      generationConfig: {\n        maxOutputTokens: 250, // Limit response length\n      },\n    }),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch data from Gemini API\");\n  }\n\n  const data = await response.json();\n  return data.candidates[0].content.parts[0].text;\n};\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,2CAA2C,CAAC,CAAC;AACpF,SAASC,YAAY,QAAQ,kBAAkB,CAAC,CAAC;AACjD,OAAO,MAAMC,WAAW,GAAG,IAAIF,sBAAsB,CAAC;EACpDG,MAAM,EAAEA,MAAM;EAAE;EAChBC,SAAS,EAAE,YAAY,CAAE;AAC3B,CAAC,CAAC;AACF,OAAO,MAAMC,wBAAwB,GAAG,MAAAA,CAAOC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAEC,UAAU,KAAK;EAC/F,MAAMP,MAAM,GAAG,yCAAyC,CAAC,CAAC;EAC1D,MAAMQ,GAAG,GAAG,gGAAgGR,MAAM,EAAE;EACpH;;EAEA,MAAMS,MAAM,GAAG;AACjB,mBAAmBN,SAAS;AAC5B,gBAAgBC,MAAM;AACtB,eAAeC,KAAK;AACpB,iBAAiBC,OAAO;AACxB,oBAAoBC,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;EAER,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;IAChCI,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,CACL;UACEC,IAAI,EAAEV;QACR,CAAC;MAEL,CAAC,CACF;MACDW,gBAAgB,EAAE;QAChBC,eAAe,EAAE,GAAG,CAAE;MACxB;IACF,CAAC;EACH,CAAC,CAAC;EAEF,IAAI,CAACX,QAAQ,CAACY,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACzD;EAEA,MAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACT,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;AACjD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}