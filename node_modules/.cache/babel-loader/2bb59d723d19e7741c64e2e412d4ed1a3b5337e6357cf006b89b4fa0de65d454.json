{"ast":null,"code":"var _jsxFileName = \"/Users/hemanth/Desktop/Learn/emotion.ai/emotion-productivity-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [happiness, setHappiness] = useState(5);\n  const [energy, setEnergy] = useState(5);\n  const [anger, setAnger] = useState(5);\n  const [anxiety, setAnxiety] = useState(5);\n  const [motivation, setMotivation] = useState(5);\n  const [tip, setTip] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // const analyzeEmotionWithGemini = async (happiness, energy, anger, anxiety, motivation) => {\n  //   const apiKey = \"YOUR_GEMINI_API_KEY\";\n  //   const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n\n  //   const prompt = `Provide a productivity tip and 3 actionable steps based on these emotional scores:\n  //   - Happiness: ${happiness}\n  //   - Energy: ${energy}\n  //   - Anger: ${anger}\n  //   - Anxiety: ${anxiety}\n  //   - Motivation: ${motivation}\n\n  //   Format the response in HTML as follows:\n  //   <ul>\n  //     <li><strong>Tip:</strong> [Your tip here]</li>\n  //     <li><strong>Steps:</strong>\n  //       <ol>\n  //         <li>[Step 1]</li>\n  //         <li>[Step 2]</li>\n  //         <li>[Step 3]</li>\n  //       </ol>\n  //     </li>\n  //   </ul>`;\n\n  //   const response = await fetch(url, {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({\n  //       contents: [\n  //         {\n  //           parts: [\n  //             {\n  //               text: prompt,\n  //             },\n  //           ],\n  //         },\n  //       ],\n  //       generationConfig: {\n  //         maxOutputTokens: 150, // Limit response length\n  //       },\n  //     }),\n  //   });\n\n  //   if (!response.ok) {\n  //     throw new Error(\"Failed to fetch data from Gemini API\");\n  //   }\n\n  //   const data = await response.json();\n  //   return data.candidates[0].content.parts[0].text;\n  // };\n\n  const generateTip = async () => {\n    setIsLoading(true);\n    try {\n      const response = await analyzeEmotionWithGemini(happiness, energy, anger, anxiety, motivation);\n      setTip(response);\n    } catch (error) {\n      console.error(\"Error generating tip:\", error);\n      setTip(\"Failed to generate a tip. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Emotion-Based Productivity Tips\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"generate-button\",\n      onClick: generateTip,\n      disabled: isLoading,\n      children: isLoading ? \"Generating...\" : \"Get Productivity Tip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), tip && /*#__PURE__*/_jsxDEV(TipDisplay, {\n      tip: tip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"pq0e2zYCXITpwzHgtt183WUYvww=\");\n_c = App;\nconst TipDisplay = ({\n  tip\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tip-container\",\n    dangerouslySetInnerHTML: {\n      __html: tip\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n};\n_c2 = TipDisplay;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"TipDisplay\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","happiness","setHappiness","energy","setEnergy","anger","setAnger","anxiety","setAnxiety","motivation","setMotivation","tip","setTip","isLoading","setIsLoading","generateTip","response","analyzeEmotionWithGemini","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","TipDisplay","_c","dangerouslySetInnerHTML","__html","_c2","$RefreshReg$"],"sources":["/Users/hemanth/Desktop/Learn/emotion.ai/emotion-productivity-app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [happiness, setHappiness] = useState(5);\n  const [energy, setEnergy] = useState(5);\n  const [anger, setAnger] = useState(5);\n  const [anxiety, setAnxiety] = useState(5);\n  const [motivation, setMotivation] = useState(5);\n  const [tip, setTip] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // const analyzeEmotionWithGemini = async (happiness, energy, anger, anxiety, motivation) => {\n  //   const apiKey = \"YOUR_GEMINI_API_KEY\";\n  //   const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n\n  //   const prompt = `Provide a productivity tip and 3 actionable steps based on these emotional scores:\n  //   - Happiness: ${happiness}\n  //   - Energy: ${energy}\n  //   - Anger: ${anger}\n  //   - Anxiety: ${anxiety}\n  //   - Motivation: ${motivation}\n\n  //   Format the response in HTML as follows:\n  //   <ul>\n  //     <li><strong>Tip:</strong> [Your tip here]</li>\n  //     <li><strong>Steps:</strong>\n  //       <ol>\n  //         <li>[Step 1]</li>\n  //         <li>[Step 2]</li>\n  //         <li>[Step 3]</li>\n  //       </ol>\n  //     </li>\n  //   </ul>`;\n\n  //   const response = await fetch(url, {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({\n  //       contents: [\n  //         {\n  //           parts: [\n  //             {\n  //               text: prompt,\n  //             },\n  //           ],\n  //         },\n  //       ],\n  //       generationConfig: {\n  //         maxOutputTokens: 150, // Limit response length\n  //       },\n  //     }),\n  //   });\n\n  //   if (!response.ok) {\n  //     throw new Error(\"Failed to fetch data from Gemini API\");\n  //   }\n\n  //   const data = await response.json();\n  //   return data.candidates[0].content.parts[0].text;\n  // };\n\n  const generateTip = async () => {\n    setIsLoading(true);\n    try {\n      const response = await analyzeEmotionWithGemini(happiness, energy, anger, anxiety, motivation);\n      setTip(response);\n    } catch (error) {\n      console.error(\"Error generating tip:\", error);\n      setTip(\"Failed to generate a tip. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Emotion-Based Productivity Tips</h1>\n      <div className=\"slider-container\">{/* Sliders go here */}</div>\n      <button className=\"generate-button\" onClick={generateTip} disabled={isLoading}>\n        {isLoading ? \"Generating...\" : \"Get Productivity Tip\"}\n      </button>\n      {tip && <TipDisplay tip={tip} />}\n    </div>\n  );\n};\n\nconst TipDisplay = ({ tip }) => {\n  return <div className=\"tip-container\" dangerouslySetInnerHTML={{ __html: tip }} />;\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}